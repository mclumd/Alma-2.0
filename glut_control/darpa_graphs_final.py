import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np



def twoDplots1():
    eps = [25000*i for i in range(8)]

    r = [ [] for i in range(8)]
    r[0] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    r[1] =  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    r[2] =  [3, 3, 4, 5, 3, 6, 4, 2, 0, 0]
    r[3] =  [3, 3, 4, 5, 6, 3, 4, 5, 2, 0]
    r[4] =  [3, 3, 4, 5, 6, 3, 4, 5, 2, 7]
    r[5] =  [3, 3, 4, 5, 6, 3, 4, 5, 2, 7]
    r[6] =  [3, 3, 4, 5, 6, 3, 4, 7, 8, 9]
    r[7] =  [3, 3, 4, 5, 6, 3, 7, 8, 9, 10]
    rideal = list(range(3, 13))
    # for i in range(8):
    #     sns.lineplot(x='a', y='b', data = r[i])
    # sns.show()
    fig, axs = plt.subplots(2,4)
    for i in range(8):
        row = i // 4
        col = i % 4
        axs[row, col].plot(r[i], marker=".", label = "Epoch {}".format(i))
        axs[row, col].plot(rideal, marker=".", label = "Greedy Policy")
        axs[row, col].set_xlabel("Step")
        axs[row, col].set_ylabel("Reward")
        axs[row, col].legend()
    fig.suptitle("Rewards Per Step After Training Epochs (vs Greedy Rewards)", fontsize=16)
    #plt.legend()    
    plt.show()


def twoDplotsHeaps():
    """10 episodes:
        rewards: [3, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        heap_lengths = [0, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    1024 episodes:  looks like we add a new f at every step.  

        e.g. f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(a
         (parents: [2684, 0]) 2688: now(895)

[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035]


    heap_lean:  [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037]

    subjects = ['a', 'f', 'g', 'l']
    network = rpb_dqn(0, subjects, [], use_gnn=True)
    network.reward_fn = get_rewards_test1
    model_name='qtest8_ckpt200000'
    self = network
    id_str=model_name

In [20]: pkl_file = open(os.path.join(model_prefix, "rpb_dqn_model_{}.pkl".format(id_str)), "rb")
(self.subjects, self.words, self.num_subjects, self.num_words, self.subjects_dict, self.words_dict,
         self.batch_size, self.use_tf, self.seed, self.gamma, self.epsilon, self.eps_min, self.eps_max,
         self.batch_size, self.max_gnn_nodes, self.max_reward) = pickle.load(pkl_file)
from vectorization import graph_representation
self.graph_rep = graph_representation(self.subjects, self.max_gnn_nodes)
self.current_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_current_model_{}".format(id_str)))
self.target_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_target_model_{}".format(id_str)))
     import rl_utils
from resolution_prebuffer import res_prebuffer, gnn_model, gnn_model_zero
import numpy as np
from rl_dataset import simple_graph_dataset
from spektral.data import DisjointLoader
from tensorflow import keras
import tensorflow as tf
import pickle
import datetime
import os

self.graph_rep = graph_representation(self.subjects, self.max_gnn_nodes)
self.current_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_current_model_{}".format(id_str)))
self.target_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_target_model_{}".format(id_str)))

 kb = 'qlearning1.pl'

alma_inst, res = alma.init(1,kb, '0', 1, 1000, [], [])
 res = rl_utils.play_episode(network, alma_inst, 10)
"""
    rewards10 = [3, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    heap_lengths10 = [0, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    rewards1024 = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                   25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                   41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
                   57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                   73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
                   89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
                   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
                   117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
                   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
                   143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
                   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
                   169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
                   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
                   195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
                   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
                   221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
                   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
                   247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
                   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
                   273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
                   299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
                   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
                   325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
                   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
                   351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
                   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
                   377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
                   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
                   403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
                   416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
                   429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
                   442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
                   455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
                   468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
                   481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
                   494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
                   507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
                   520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
                   533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
                   546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
                   559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
                   572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
                   585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
                   598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
                   611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
                   624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
                   637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
                   650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
                   663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
                   676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
                   689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
                   702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
                   715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
                   728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
                   741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
                   754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
                   767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
                   780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
                   793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
                   806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
                   819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
                   832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
                   845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
                   858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
                   871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
                   884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
                   897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
                   910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
                   923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
                   936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
                   949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
                   962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
                   975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
                   988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
                   1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
                   1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
                   1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
                   1034, 1035]
    
    heap_lengths1024 = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                        43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
                        59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                        90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
                        105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
                        118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
                        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
                        144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
                        157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                        170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
                        183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
                        196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                        209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
                        222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
                        235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
                        248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
                        261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
                        274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
                        287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
                        300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
                        313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
                        326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
                        339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
                        352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
                        365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
                        378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
                        391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
                        404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
                        417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
                        430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
                        443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
                        456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
                        469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481,
                        482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
                        495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
                        508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
                        521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
                        534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
                        547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
                        560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
                        573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
                        586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598,
                        599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
                        612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
                        625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
                        638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
                        651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
                        664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
                        677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
                        690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
                        703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
                        716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
                        729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
                        742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
                        755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
                        768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
                        781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
                        794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
                        807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
                        820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
                        833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
                        846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
                        859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
                        872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
                        885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
                        898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
                        911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
                        924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
                        937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
                        950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
                        963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
                        976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
                        989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 999, 1000,
                        1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
                        1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
                        1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
                        1034, 1035, 1036, 1037]
    #fig, axs = plt.subplots(2,4)
    # plt.plot(list(range(1, 11)), rewards10, label = 'Reward', marker='.')
    # plt.xlabel("Step")
    # plt.ylabel("Reward")
    # plt.title("Rewards Over 10 Reasoning Steps")
    # plt.show()
    # plt.clf()
    
    # plt.plot(list(range(1, 1025)), rewards1024, label = 'Reward', marker='.')
    # plt.xlabel("Step")
    # plt.ylabel("Reward")
    # plt.title("Rewards Over 1024 Reasoning Steps")
    # plt.show()
    # plt.clf()

    # plt.plot(list(range(1, 1025)), heap_lengths1024, label = 'Heap Size', marker='.')
    # plt.xlabel("Step")
    # plt.ylabel("Number of Formulae")
    # plt.title("Heap Size Over 1024 Reasoning Steps")
    # plt.show()
    plt.clf()

    for endpt in [11, 1023]:
        domain = np.arange(1, endpt+1, dtype=np.float64)
        exp1024 = np.abs(np.power(2,domain))
        superexp1024 = np.power(2, exp1024)
        plt.plot(domain, np.log2(np.array(heap_lengths1024[1:endpt+1])), label = 'Heap Size', marker='.')
        #plt.plot(domain, np.array(heap_lengths1024[1:endpt+1]), label = 'Heap Size', marker='.')
        plt.plot(domain, exp1024, label = 'Doubly Exponential (2^(2^n))', marker='.')
        #plt.plot(domain, superexp1024, label = 'Doubly Exponential (2^(2^n))', marker='.')
        plt.xlabel("Step")
        plt.ylabel(" $\log_2$ of the Number of Formulae")
        #plt.yscale('log', basey=2)
        #plt.xscale('log', basex=2)
        #plt.yticks(domain, ["$2^{{ {} }}".format(x) for x in domain])
        #plt.yticks(np.arange(1, 2**(2**(endpt+1)), 2**(2**(endpt+1))//5, dtype=np.float64), ["$2^{{ {} }}".format(x) for x in np.arange(1, endpt+1, endpt//5)])
        #plt.yticks(superexp1024[1:endpt+1])
        
        #plt.yticks(["$2^{{ {} }} $".format(x) for x in np.arange(1, endpt+1, endpt//5)])
        #plt.yticks(np.arange(endpt-1), ["$2^{{ {} }} $".format(x) for x in domain])
        #plt.yticks(np.arange(5), ["$2^{{ {} }} $".format(x) for x in domain])
        plt.title("Heap Size Over {} Reasoning Steps".format(endpt+1))
        plt.legend()
        plt.show()
        plt.clf()


def load_bookshelf():
    import os
    import random
    import numpy as np
    import itertools
    import pickle
    import gc
    from importlib import reload
    import alma, alma_utils
    import argparse
    import rl_utils, rl_dataset
    #import resolution_prebuffer as rpb
    from rpb_dqn import rpb_dqn, get_rewards_test1, get_rewards_test3, get_bookshelf_rewards
    import time

    subjects = [ 'isA', 'bookshelf', 'contains', 'book', 'sequel',
                 'prequel', 'thisShelf', 'furniture', 'table',
                 'legs', 'affords', 'sitting', 'placing',
                 'desire', 'find', 'myNovel', 'lookFor']
    max_reward = 1
    network = rpb_dqn(0, subjects, [], use_gnn=True)
    network.reward_fn = get_rewards_test3
    model_name='bookshelf_reuse_ckpt18400'
    network.model_load(model_name)
    self = network
    id_str=model_name

    pkl_file = open(os.path.join(model_prefix, "rpb_dqn_model_{}.pkl".format(id_str)), "rb")
    (self.subjects, self.words, self.num_subjects, self.num_words, self.subjects_dict, self.words_dict,
             self.batch_size, self.use_tf, self.seed, self.gamma, self.epsilon, self.eps_min, self.eps_max,
             self.batch_size, self.max_gnn_nodes, self.max_reward) = pickle.load(pkl_file)
    from vectorization import graph_representation
    self.graph_rep = graph_representation(self.subjects, self.max_gnn_nodes)
    self.current_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_current_model_{}".format(id_str)))
    self.target_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_target_model_{}".format(id_str)))
    import rl_utils
    from resolution_prebuffer import res_prebuffer, gnn_model, gnn_model_zero
    import numpy as np
    from rl_dataset import simple_graph_dataset
    from spektral.data import DisjointLoader
    from tensorflow import keras
    import tensorflow as tf
    import pickle
    import datetime
    import os

    self.graph_rep = graph_representation(self.subjects, self.max_gnn_nodes)
    self.current_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_current_model_{}".format(id_str)))
    self.target_model.model = keras.models.load_model(os.path.join(model_prefix, "rpb_dqn_target_model_{}".format(id_str)))


    import alma
    kb = 'bookshelf1.pl'

    alma_inst, res = alma.init(1,kb, '0', 1, 1000, [], [])

    import rl_utils
    return rl_utils.play_episode(network, alma_inst, 100)
